---
- hosts: robot
  vars:
    pull_image: true

  roles:
    # - role: ansible-role-ros-master
    #   docker_users:
    #     - '{{ local_user }}'
    #     - vagrant
    #   become: yes
    # - { role: ansible-role-ros-webviz, become: yes }

  tasks:

    # - name: Clone club robot repo
    #   ansible.builtin.git:
    #     repo: 'https://github.com/frankjoshua/robomo-club-robot.git'
    #     dest: '/home/{{ local_user }}/robomo-club-robot'

    # - name: Start Jviz docker container
    #   docker_container:
    #     name: 'ros_jviz'
    #     image: 'frankjoshua/ros-jviz'
    #     ports:
    #       - '8088:3000'
    #     restart_policy: 'unless-stopped'
    #     env:
    #       ROS_MASTER_URI: '{{ ros_master_uri }}'
    #       ROS_IP: '{{ ros_ip }}'
    #   become: yes

    # - name: export ros_master_uri
    #   lineinfile:
    #     dest: '/home/{{ local_user }}/.bashrc'
    #     state: present
    #     regexp: '^export ROS_MASTER_URI='
    #     line: 'export ROS_MASTER_URI={{ ros_master_uri }}'
    #   become: yes

    # - name: export ros_ip
    #   lineinfile:
    #     dest: '/home/{{ local_user }}/.bashrc'
    #     state: present
    #     regexp: '^export ROS_IP='
    #     line: 'export ROS_IP={{ ros_ip }}'
    #   become: yes

    - name: Create Volumes for ROS persistent storage
      docker_volume:
        name: '{{ item }}'
      with_items:
        - 'ros_move_base'
        - 'ros_jupyter'
        - 'ros_urdf'
        - 'ros_bridge_suite'
        - 'ros_gmapping'
      become: yes

    - name: Start ROS2 Webbridge Suite
      docker_container:
        name: 'ros2_bridge_suite'
        image: 'frankjoshua/ros2-bridge-suite'
        network_mode: 'host'
        restart_policy: 'unless-stopped'
      become: yes

    ## Exmaple of Static map
    # - name: Start Map Server with Static Map
    #   docker_container:
    #     name: 'ros_map_server'
    #     image: 'frankjoshua/ros-map-server'
    #     network_mode: 'host'
    #     restart_policy: 'unless-stopped'
    #     volumes:
    #       - 'ros_map_server:/app'
    #     env:
    #       ROS_MASTER_URI: '{{ ros_master_uri }}'
    #       ROS_IP: '{{ ros_ip }}'
    #   become: yes

    # - name: Start ROS gmapping node
    #   docker_container:
    #     name: 'ros_gmapping'
    #     image: 'frankjoshua/ros-gmapping'
    #     network_mode: 'host'
    #     restart_policy: 'unless-stopped'
    #     volumes:
    #       - '/home/{{ local_user }}/robomo-club-robot/notebooks/ros_gmapping:/app'
    #     env:
    #       ROS_MASTER_URI: '{{ ros_master_uri }}'
    #       ROS_IP: '{{ ros_ip }}'
    #     log_driver: json-file
    #     log_options:
    #       max-size: '10m'
    #       max-file: '3'
    #   become: yes

    - name: Start ROS2 Slam Toolbox node
      docker_container:
        name: 'ros2_slam_toolbox'
        image: 'frankjoshua/ros2-slamtoolbox'
        network_mode: 'host'
        restart_policy: 'unless-stopped'
        log_driver: json-file
        log_options:
          max-size: '10m'
          max-file: '3'
      become: yes

    # - name: Start ROS Move Base node
    #   docker_container:
    #     name: 'ros_move_base'
    #     image: 'frankjoshua/ros-move-base'
    #     network_mode: 'host'
    #     restart_policy: 'unless-stopped'
    #     volumes:
    #       # - 'ros_move_base:/app'
    #       - '/home/{{ local_user }}/robomo-club-robot/notebooks/ros_move_base:/app'
    #     env:
    #       ROS_MASTER_URI: '{{ ros_master_uri }}'
    #       ROS_IP: '{{ ros_ip }}'
    #     log_driver: json-file
    #     log_options:
    #       max-size: '10m'
    #       max-file: '3'
    #   become: yes

    # - name: Start ROS2 ROS1 Bridge
    #   docker_container:
    #     name: 'ros2_ros1_bridge'
    #     image: 'frankjoshua/ros2-ros1-bridge'
    #     network_mode: 'host'
    #     restart_policy: 'unless-stopped'
    #     log_driver: json-file
    #     log_options:
    #       max-size: '10m'
    #       max-file: '3'
    #   become: yes

    - name: Start ROS2 Nav2 node
      docker_container:
        name: 'ros2_nav'
        image: 'frankjoshua/ros2-nav2'
        network_mode: 'host'
        restart_policy: 'unless-stopped'
        log_driver: json-file
        log_options:
          max-size: '10m'
          max-file: '3'
      become: yes

    # - name: Start ROS2 Unity TCP Endpoint node for simulation
    #   docker_container:
    #     name: 'ros2_unity_endpoint'
    #     image: 'frankjoshua/ros2-unity-tcp-endpoint'
    #     network_mode: 'host'
    #     restart_policy: 'unless-stopped'
    #     log_driver: json-file
    #     log_options:
    #       max-size: '10m'
    #       max-file: '3'
    #   become: yes

    # - name: Start ROS2 Unity TCP Endpoint node for control
    #   docker_container:
    #     name: 'ros2_unity_endpoint_control'
    #     image: 'frankjoshua/ros2-unity-tcp-endpoint'
    #     network_mode: 'host'
    #     restart_policy: 'unless-stopped'
    #     log_driver: json-file
    #     log_options:
    #       max-size: '10m'
    #       max-file: '3'
    #     command: "'ros2 run ros_tcp_endpoint default_server_endpoint --ros-args -p ROS_IP:=0.0.0.0 -p ROS_TCP_PORT:=10002'"
    #   become: yes

    # - name: Start ROS Velocity Muxer node
    #   docker_container:
    #     name: 'ros_vel_muxer'
    #     image: 'frankjoshua/ros-vel-muxer'
    #     network_mode: 'host'
    #     restart_policy: 'unless-stopped'
    #     env:
    #       ROS_MASTER_URI: '{{ ros_master_uri }}'
    #       ROS_IP: '{{ ros_ip }}'
    #       X_SPEED_MULTIPLE: '0.3'
    #       Y_SPEED_MULTIPLE: '0.3'
    #       MANUAL_TOPIC: '/pocketbot/cmd_vel'
    #     log_driver: json-file
    #     log_options:
    #       max-size: '10m'
    #       max-file: '3'
    #   become: yes

    # - name: Setup vscode sever to edit ROS config files
    #   docker_container:
    #     name: 'vs_code'
    #     image: 'codercom/code-server:latest'
    #     restart_policy: 'unless-stopped'
    #     volumes:
    #       - 'ros_move_base:/home/coder/project/ros_move_base'
    #       - 'ros_urdf:/home/coder/project/ros_urdf'
    #     ports:
    #       - '8880:8080'
    #     env:
    #       ROS_MASTER_URI: '{{ ros_master_uri }}'
    #       ROS_IP: '{{ ros_ip }}'
    #     user: root
    #   become: yes
